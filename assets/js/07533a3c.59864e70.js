"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[6709],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(r),b=a,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||o;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},7038:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const o={tags:["frontend","testing","rxjs","jest"]},s="RxJS",l={unversionedId:"frontend/rxjs",id:"frontend/rxjs",title:"RxJS",description:"- Interactive diagrams of Rx Observables and Operators - Unfortunately no longer maintained",source:"@site/docs/frontend/rxjs.md",sourceDirName:"frontend",slug:"/frontend/rxjs",permalink:"/docs/frontend/rxjs",draft:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/frontend/rxjs.md",tags:[{label:"frontend",permalink:"/docs/tags/frontend"},{label:"testing",permalink:"/docs/tags/testing"},{label:"rxjs",permalink:"/docs/tags/rxjs"},{label:"jest",permalink:"/docs/tags/jest"}],version:"current",frontMatter:{tags:["frontend","testing","rxjs","jest"]},sidebar:"defaultSidebar",previous:{title:"Angular",permalink:"/docs/frontend/angular"},next:{title:"Testing",permalink:"/docs/frontend/testing/"}},c={},i=[{value:"<code>shareReplay()</code> operator can cause memory leak",id:"sharereplay-operator-can-cause-memory-leak",level:2},{value:"High order operators with marbles",id:"high-order-operators-with-marbles",level:2}],p={toc:i},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rxjs"},"RxJS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://rxmarbles.com"},"Interactive diagrams of Rx Observables and Operators")," - Unfortunately no longer maintained"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=PF3mFOZn3MQ"},"Video: Hot vs Cold Observable"))),(0,a.kt)("h2",{id:"sharereplay-operator-can-cause-memory-leak"},(0,a.kt)("inlineCode",{parentName:"h2"},"shareReplay()")," operator can cause memory leak"),(0,a.kt)("p",null,"When not setting ",(0,a.kt)("inlineCode",{parentName:"p"},"refCount: true")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"shareReplay()")," operator, it will never unsubscribe to its upstream observable even if all downstream observable have unsubscribed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { interval, tap, shareReplay, takeUntil } from 'rxjs';\n\nconst observable$ = interval(100).pipe(\n  tap(() => console.log('tick')),\n  // takeUntil(cancelEvent$), // Can also be added to cancel subscribtion\n  // shareReplay({bufferSize: 1, refCount: true}) // shareReplay with refCount=true unsubscribes parent if no subscribers are left\n  shareReplay(1) // even with unsubscribe tick is printed in console\n)\n\nconst subscription = observable$.subscribe(console.log);\n\nsetTimeout(() => {subscription.unsubscribe()}, 500)\n")),(0,a.kt)("h2",{id:"high-order-operators-with-marbles"},"High order operators with marbles"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('switchMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b'});\n    const dest = source.pipe(\n      switchMap(query => m.cold('---c-d', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('----g-h', {g: 'b1', h: 'b2'});\n  })\n);\n\nit('mergeMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b'});\n    const dest = source.pipe(\n      mergeMap(query => m.cold('---c-d', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('---efgh', {e: 'a1', f: 'b1', g: 'a2', h: 'b2'});\n  })\n);\n\nit('concatMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b', c: 'c'});\n    const dest = source.pipe(\n      concatMap(query => m.cold('--c-d|', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('--e-f--g-h', {e: 'a1', f: 'a2', g: 'b1', h: 'b2'});\n  })\n);\n\nit('exhaustMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b'});\n    const dest = source.pipe(\n      exhaustMap(query => m.cold('---c-d', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('---g-h', {g: 'a1', h: 'a2'});\n  })\n);\n")))}d.isMDXComponent=!0}}]);