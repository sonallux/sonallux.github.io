"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[7165],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?s.createElement(f,o(o({ref:n},u),{},{components:t})):s.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5327:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=t(7462),r=(t(7294),t(3905));const a={tags:["frontend","testing","jest","rxjs"]},o="Testing asynchronous code",i={unversionedId:"frontend/testing/testing-async",id:"frontend/testing/testing-async",title:"Testing asynchronous code",description:"Assertion is performed in asynchronous code and therefore assertion errors are not visible to jest",source:"@site/docs/frontend/testing/testing-async.md",sourceDirName:"frontend/testing",slug:"/frontend/testing/testing-async",permalink:"/docs/frontend/testing/testing-async",draft:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/frontend/testing/testing-async.md",tags:[{label:"frontend",permalink:"/docs/tags/frontend"},{label:"testing",permalink:"/docs/tags/testing"},{label:"jest",permalink:"/docs/tags/jest"},{label:"rxjs",permalink:"/docs/tags/rxjs"}],version:"current",frontMatter:{tags:["frontend","testing","jest","rxjs"]},sidebar:"defaultSidebar",previous:{title:"Cypress",permalink:"/docs/frontend/testing/cypress"},next:{title:"Testing RxJS Code",permalink:"/docs/frontend/testing/testing-rxjs"}},l={},c=[{value:"With Angular testing utility functions",id:"with-angular-testing-utility-functions",level:2},{value:"Testing Observables",id:"testing-observables",level:2},{value:"Using <code>fakeAsync()</code> with <code>Observables</code>",id:"using-fakeasync-with-observables",level:2}],u={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,s.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing-asynchronous-code"},"Testing asynchronous code"),(0,r.kt)("p",null,"Assertion is performed in asynchronous code and therefore assertion errors are not visible to jest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should use window.setTimeout', () => {\n  let a = 1\n  window.setTimeout(() => {\n    a++;\n    expect(a).toBe(1) // Test passes\n  })\n});\n\nit('should use Promise', () => {\n  let a = 1\n  Promise.resolve().then(() => {\n    a++;\n    expect(a).toBe(1) // Test passes, but console has \"Unhandled Promise rejection\" error\n  })\n});\n")),(0,r.kt)("p",null,"Use done callback provided by jest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should use window.setTimeout', done => {\n  let a = 1\n  window.setTimeout(() => {\n    a++;\n    expect(a).toBe(2)\n    done()\n  })\n});\n\nit('should use Promise', done => {\n  let a = 1\n  Promise.resolve().then(() => {\n    a++;\n    expect(a).toBe(2)\n  }).then(done, done) // Call done on Promise.resolve and Promise.reject\n});\n")),(0,r.kt)("p",null,"Or return a Promise:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should use Promise', () => {\n  let a = 1\n  return Promise.resolve().then(() => {\n    a++;\n    expect(a).toBe(2)\n  })\n});\n")),(0,r.kt)("p",null,"Or use async/await:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should use Promise', async () => {\n  let a = 1\n  await Promise.resolve().then(() => a++)\n  expect(a).toBe(2)\n});\n")),(0,r.kt)("h2",{id:"with-angular-testing-utility-functions"},"With Angular testing utility functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"waitForAsync()")," waits for all async tasks to be completed even async tasks from other tests!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should use waitForAsync', waitForAsync(() => {\n  let a = 1\n  Promise.resolve().then(() => {\n    a++;\n    expect(a).toBe(2)\n  })\n}));\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fakeAsync()")," does not influence other tests. It will execute all microtasks, but not macrotask. It will throw an error if there are pending macrotasks after finishing the test. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"tick()")," to advance the specified amount of time or ",(0,r.kt)("inlineCode",{parentName:"p"},"flush()")," to advance till every microtask is finished. ",(0,r.kt)("inlineCode",{parentName:"p"},"flush()")," does not handle/wait for periodic tasks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class Incrementer {\n  private _a = 1\n\n  get a() {\n    return this._a;\n  }\n\n  increment() {\n    window.setTimeout(() => this._a++, 100)\n\n    // periodic task\n    //const intervalId = window.setInterval(() => {\n    //  this._a++;\n    //  //window.clearInterval(intervalId)\n    //}, 100)\n  }\n}\n\nit('should test the incrementer', fakeAsync(() => {\n  const incrementer = new Incrementer();\n  expect(incrementer.a).toBe(1)\n  incrementer.increment()\n  tick(100)\n  //flush()\n  expect(incrementer.a).toBe(2)\n}));\n")),(0,r.kt)("h2",{id:"testing-observables"},"Testing Observables"),(0,r.kt)("p",null,"Pay attention whether an Observables emits synchronously or asynchronously:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should test with of()', () => {\n  let a = 1\n  of(1)// of() emits is synchronous\n    .subscribe(n => a += n)\n  expect(a).toBe(2)\n});\n\nit('should test with Observable constructor', () => {\n  let a = 1\n  new Observable<number>(subscriber => subscriber.next(1))\n    .subscribe(n => a += n) // still synchronous\n  expect(a).toBe(2)\n});\n\nit('should test with Observable constructor asynchronous', () => {\n  let a = 1\n  new Observable<number>(subscriber => {\n    window.setTimeout( () => subscriber.next(1))\n  }) // asynchronous because of setTimeout\n    .subscribe(n => a += n)\n  expect(a).toBe(1)\n});\n")),(0,r.kt)("h2",{id:"using-fakeasync-with-observables"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"fakeAsync()")," with ",(0,r.kt)("inlineCode",{parentName:"h2"},"Observables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should assert in subscribe', fakeAsync( () => {\n  let a = 1\n  of(1).subscribe(n => {\n    a += n\n    expect(a).toBe(1) // assertion error is caught by subscribe() and re-thrown asynchronously\n  })\n  expect(a).toBe(2)\n\n  tick() // This will make the thrown error visible\n}));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('should subject', fakeAsync(async () => {\n  let a = 1;\n\n  const nPromise = firstValueFrom(of(1).pipe(delay(0))) // macrotask\n  //const nPromise = firstValueFrom(scheduled([1], asyncScheduler)) // macrotask\n  //const nPromise = firstValueFrom(scheduled([1], asapScheduler)) // microtask\n\n  tick() // needed for macrotask (asyncScheduler), but not for asapScheduler. Because microtask is awaited by await\n  //flush() // does only flush microtask\n\n  a += await nPromise\n\n  expect(a).toBe(2)\n}));\n")))}p.isMDXComponent=!0}}]);