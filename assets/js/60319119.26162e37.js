"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[5821],{7036:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=n(4848),t=n(8453);const a={tags:["javascript","testing","rxjs","jest"]},o="RxJS",c={id:"javascript/rxjs",title:"RxJS",description:"- Interactive diagrams of Rx Observables and Operators - Unfortunately no longer maintained",source:"@site/docs/javascript/rxjs.md",sourceDirName:"javascript",slug:"/javascript/rxjs",permalink:"/docs/javascript/rxjs",draft:!1,unlisted:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/javascript/rxjs.md",tags:[{inline:!0,label:"javascript",permalink:"/docs/tags/javascript"},{inline:!0,label:"testing",permalink:"/docs/tags/testing"},{inline:!0,label:"rxjs",permalink:"/docs/tags/rxjs"},{inline:!0,label:"jest",permalink:"/docs/tags/jest"}],version:"current",frontMatter:{tags:["javascript","testing","rxjs","jest"]},sidebar:"defaultSidebar",previous:{title:"Object property order",permalink:"/docs/javascript/performance/object-property-order"},next:{title:"Observability",permalink:"/docs/observability/"}},i={},l=[{value:"<code>shareReplay()</code> operator can cause memory leak",id:"sharereplay-operator-can-cause-memory-leak",level:2},{value:"High order operators with marbles",id:"high-order-operators-with-marbles",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"rxjs",children:"RxJS"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"https://rxmarbles.com",children:"Interactive diagrams of Rx Observables and Operators"})," - Unfortunately no longer maintained"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.youtube.com/watch?v=PF3mFOZn3MQ",children:"Video: Hot vs Cold Observable"})}),"\n"]}),"\n",(0,s.jsxs)(r.h2,{id:"sharereplay-operator-can-cause-memory-leak",children:[(0,s.jsx)(r.code,{children:"shareReplay()"})," operator can cause memory leak"]}),"\n",(0,s.jsxs)(r.p,{children:["When not setting ",(0,s.jsx)(r.code,{children:"refCount: true"})," for the ",(0,s.jsx)(r.code,{children:"shareReplay()"})," operator, it will never unsubscribe to its upstream observable even if all downstream observable have unsubscribed."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { interval, tap, shareReplay, takeUntil } from 'rxjs';\n\nconst observable$ = interval(100).pipe(\n  tap(() => console.log('tick')),\n  // takeUntil(cancelEvent$), // Can also be added to cancel subscribtion\n  // shareReplay({bufferSize: 1, refCount: true}) // shareReplay with refCount=true unsubscribes parent if no subscribers are left\n  shareReplay(1) // even with unsubscribe tick is printed in console\n)\n\nconst subscription = observable$.subscribe(console.log);\n\nsetTimeout(() => {subscription.unsubscribe()}, 500)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"high-order-operators-with-marbles",children:"High order operators with marbles"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"it('switchMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b'});\n    const dest = source.pipe(\n      switchMap(query => m.cold('---c-d', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('----g-h', {g: 'b1', h: 'b2'});\n  })\n);\n\nit('mergeMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b'});\n    const dest = source.pipe(\n      mergeMap(query => m.cold('---c-d', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('---efgh', {e: 'a1', f: 'b1', g: 'a2', h: 'b2'});\n  })\n);\n\nit('concatMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b', c: 'c'});\n    const dest = source.pipe(\n      concatMap(query => m.cold('--c-d|', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('--e-f--g-h', {e: 'a1', f: 'a2', g: 'b1', h: 'b2'});\n  })\n);\n\nit('exhaustMap', marbles((m) => {\n    const source = m.cold('ab', {a: 'a', b: 'b'});\n    const dest = source.pipe(\n      exhaustMap(query => m.cold('---c-d', {c: query + '1', d: query + '2'}))\n    );\n\n    m.expect(dest).toBeObservable('---g-h', {g: 'a1', h: 'a2'});\n  })\n);\n"})})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>c});var s=n(6540);const t={},a=s.createContext(t);function o(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);