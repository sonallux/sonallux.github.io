"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[9584],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=s,d=u["".concat(l,".").concat(m)]||u[m]||b[m]||o;return r?n.createElement(d,a(a({ref:t},p),{},{components:r})):n.createElement(d,a({ref:t},p))}));function d(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4043:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>b,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),s=(r(7294),r(3905));const o={tags:["frontend","testing","jest","rxjs"]},a="Testing RxJS Code",i={unversionedId:"frontend/testing/testing-rxjs",id:"frontend/testing/testing-rxjs",title:"Testing RxJS Code",description:"Testing with marbles",source:"@site/docs/frontend/testing/testing-rxjs.md",sourceDirName:"frontend/testing",slug:"/frontend/testing/testing-rxjs",permalink:"/docs/frontend/testing/testing-rxjs",draft:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/frontend/testing/testing-rxjs.md",tags:[{label:"frontend",permalink:"/docs/tags/frontend"},{label:"testing",permalink:"/docs/tags/testing"},{label:"jest",permalink:"/docs/tags/jest"},{label:"rxjs",permalink:"/docs/tags/rxjs"}],version:"current",frontMatter:{tags:["frontend","testing","jest","rxjs"]},sidebar:"defaultSidebar",previous:{title:"Testing asynchronous code",permalink:"/docs/frontend/testing/testing-async"},next:{title:"Eventual Consistency",permalink:"/docs/eventual-consistency"}},l={},c=[{value:"Testing with marbles",id:"testing-with-marbles",level:2},{value:"Easier assertions on observables without marbles",id:"easier-assertions-on-observables-without-marbles",level:2}],p={toc:c},u="wrapper";function b(e){let{components:t,...r}=e;return(0,s.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testing-rxjs-code"},"Testing RxJS Code"),(0,s.kt)("h2",{id:"testing-with-marbles"},"Testing with marbles"),(0,s.kt)("p",null,"Testing reactive/asynchronous can be done by virtualize time. Marble diagrams provide a way to visualize the behavior of observables.\nBoth concepts can be used together to test RxJS code (example taken from ",(0,s.kt)("a",{parentName:"p",href:"https://rxjs.dev/guide/testing/marble-testing"},"this RxJS guide"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { TestScheduler } from 'rxjs/testing';\nimport { throttleTime } from 'rxjs';\n \nconst testScheduler = new TestScheduler((actual, expected) => {\n  // asserting the two objects are equal - required for TestScheduler assertions to work via your test framework e.g. using chai.\n  expect(actual).deep.equal(expected);\n});\n \nit('generates the stream correctly', () => {\n  testScheduler.run((helpers) => {\n    const { cold, time, expectObservable, expectSubscriptions } = helpers;\n    const e1 = cold(' -a--b--c---|');\n    const e1subs = '  ^----------!';\n    const t = time('   ---|       '); // t = 3\n    const expected = '-a-----c---|';\n \n    expectObservable(e1.pipe(throttleTime(t))).toBe(expected);\n    expectSubscriptions(e1.subscriptions).toBe(e1subs);\n  });\n});\n")),(0,s.kt)("p",null,"As there is a lot of boilerplate code involved, the ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/rxjs-marbles"},"rxjs-marbles")," library has been created:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { marbles } from 'rxjs-marbles/jest';\nimport { throttleTime } from 'rxjs';\n\nit('generates the stream correctly', marbles(({cold, time, expect}) => {\n  const e1 = cold(' -a--b--c---|');\n  const e1subs = '  ^----------!';\n  const t = time('   ---|       '); // t = 3\n  const expected = '-a-----c---|';\n\n  const result = e1.pipe(throttleTime(t))\n\n  expect(result).toBeObservable(expected);\n  expect(e1).toHaveSubscriptions(e1subs);\n}));\n")),(0,s.kt)("h2",{id:"easier-assertions-on-observables-without-marbles"},"Easier assertions on observables without marbles"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@hirez_io/observer-spy"},"@hirez_io/observer-spy")," library provides a way to make assertions on observables without using marbles:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { subscribeSpyTo } from '@hirez_io/observer-spy';\n\nit('should filter even numbers and multiply each number by 10', () => {\n  const result$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).pipe(\n    filter(n => n % 2 !== 0),\n    map(x => x * 10)\n  );\n\n  const observerSpy = subscribeSpyTo(result$);\n\n  expect(observerSpy.getValues()).toEqual([10, 30, 50, 70, 90]);\n});\n")))}b.isMDXComponent=!0}}]);