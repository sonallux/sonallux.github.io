"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[9584],{6826:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=s(5893),r=s(1151);const i={tags:["javascript","testing","jest","rxjs"]},o="Testing RxJS Code",a={id:"frontend/testing/testing-rxjs",title:"Testing RxJS Code",description:"Testing with marbles",source:"@site/docs/frontend/testing/testing-rxjs.md",sourceDirName:"frontend/testing",slug:"/frontend/testing/testing-rxjs",permalink:"/docs/frontend/testing/testing-rxjs",draft:!1,unlisted:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/frontend/testing/testing-rxjs.md",tags:[{label:"javascript",permalink:"/docs/tags/javascript"},{label:"testing",permalink:"/docs/tags/testing"},{label:"jest",permalink:"/docs/tags/jest"},{label:"rxjs",permalink:"/docs/tags/rxjs"}],version:"current",frontMatter:{tags:["javascript","testing","jest","rxjs"]},sidebar:"defaultSidebar",previous:{title:"Testing asynchronous code",permalink:"/docs/frontend/testing/testing-async"},next:{title:"Javascript",permalink:"/docs/category/javascript"}},c={},l=[{value:"Testing with marbles",id:"testing-with-marbles",level:2},{value:"Easier assertions on observables without marbles",id:"easier-assertions-on-observables-without-marbles",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"testing-rxjs-code",children:"Testing RxJS Code"}),"\n",(0,n.jsx)(t.h2,{id:"testing-with-marbles",children:"Testing with marbles"}),"\n",(0,n.jsxs)(t.p,{children:["Testing reactive/asynchronous can be done by virtualize time. Marble diagrams provide a way to visualize the behavior of observables.\nBoth concepts can be used together to test RxJS code (example taken from ",(0,n.jsx)(t.a,{href:"https://rxjs.dev/guide/testing/marble-testing",children:"this RxJS guide"}),"):"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import { TestScheduler } from 'rxjs/testing';\nimport { throttleTime } from 'rxjs';\n \nconst testScheduler = new TestScheduler((actual, expected) => {\n  // asserting the two objects are equal - required for TestScheduler assertions to work via your test framework e.g. using chai.\n  expect(actual).deep.equal(expected);\n});\n \nit('generates the stream correctly', () => {\n  testScheduler.run((helpers) => {\n    const { cold, time, expectObservable, expectSubscriptions } = helpers;\n    const e1 = cold(' -a--b--c---|');\n    const e1subs = '  ^----------!';\n    const t = time('   ---|       '); // t = 3\n    const expected = '-a-----c---|';\n \n    expectObservable(e1.pipe(throttleTime(t))).toBe(expected);\n    expectSubscriptions(e1.subscriptions).toBe(e1subs);\n  });\n});\n"})}),"\n",(0,n.jsxs)(t.p,{children:["As there is a lot of boilerplate code involved, the ",(0,n.jsx)(t.a,{href:"https://www.npmjs.com/package/rxjs-marbles",children:"rxjs-marbles"})," library has been created:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"import { marbles } from 'rxjs-marbles/jest';\nimport { throttleTime } from 'rxjs';\n\nit('generates the stream correctly', marbles(({cold, time, expect}) => {\n  const e1 = cold(' -a--b--c---|');\n  const e1subs = '  ^----------!';\n  const t = time('   ---|       '); // t = 3\n  const expected = '-a-----c---|';\n\n  const result = e1.pipe(throttleTime(t))\n\n  expect(result).toBeObservable(expected);\n  expect(e1).toHaveSubscriptions(e1subs);\n}));\n"})}),"\n",(0,n.jsx)(t.h2,{id:"easier-assertions-on-observables-without-marbles",children:"Easier assertions on observables without marbles"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://www.npmjs.com/package/@hirez_io/observer-spy",children:"@hirez_io/observer-spy"})," library provides a way to make assertions on observables without using marbles:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { subscribeSpyTo } from '@hirez_io/observer-spy';\n\nit('should filter even numbers and multiply each number by 10', () => {\n  const result$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).pipe(\n    filter(n => n % 2 !== 0),\n    map(x => x * 10)\n  );\n\n  const observerSpy = subscribeSpyTo(result$);\n\n  expect(observerSpy.getValues()).toEqual([10, 30, 50, 70, 90]);\n});\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>o});var n=s(7294);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);