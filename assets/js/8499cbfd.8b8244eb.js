"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[9068],{3117:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>v,frontMatter:()=>p,metadata:()=>x,toc:()=>b});var r=s(4848),a=s(8453),n=s(6540),i=(s(7154),s(6118)),o=s(5638),l=s(4731);const u={counterRate:"counterRate_Ddv1",row:"row_kE80",rawTimeSeriesInput:"rawTimeSeriesInput_FYf4"};function c(e){let{}=e;const[t,s]=(0,n.useState)("0, 1, 3, 6, 9, 10, 2, 3, 6, 11"),[a,i]=(0,n.useState)(2.5),[o,c]=(0,n.useState)(7.5),[p,m]=(0,n.useState)(!1),[x,y]=(0,n.useState)(!1),[b,g]=(0,n.useState)(!1),[v,f]=(0,n.useState)(""),j=t.split(",").map((e=>Number.parseInt(e.trim()))).map(((e,t)=>({x:t,y:e}))),w=function(e){let t=0;const s=[e[0]];for(let r=1;r<e.length;r++)e[r-1].y>e[r].y&&(t+=e[r-1].y),s.push({x:e[r].x,y:e[r].y+t});return s}(j.filter((e=>e.x>=a&&e.x<=o))),k=d(w[0],w[w.length-1]),M=d(w[w.length-2],w[w.length-1]),S={timeWindow:{type:"box",xMin:a,xMax:o,backgroundColor:"rgba(255,255,102,0.2)"},linearFunction:{type:"line",xMin:a,yMin:h(k,a),xMax:o,yMax:h(k,o),display:x},iRateFunction:{type:"line",xMin:a,yMin:h(M,a),xMax:o,yMax:h(M,o),display:b}};return(0,r.jsxs)("div",{className:u.counterRate,children:[(0,r.jsx)(l.Xl,{data:{datasets:[{label:"Fixed counter",data:w,hidden:!p},{label:"Counter",data:j}]},options:{scales:{x:{beginAtZero:!0,ticks:{stepSize:1},title:{text:"Seconds",display:!0}},y:{beginAtZero:!0}},plugins:{annotation:{annotations:S}}}}),(0,r.jsx)("input",{className:u.rawTimeSeriesInput,type:"text",value:t,onChange:e=>s(e.target.value)}),(0,r.jsxs)("div",{className:u.row,children:[(0,r.jsx)("span",{children:"Time Window"}),"Start",(0,r.jsx)("input",{type:"number",value:a,onChange:e=>i(Number.parseFloat(e.target.value))}),"End",(0,r.jsx)("input",{type:"number",value:o,onChange:e=>c(Number.parseFloat(e.target.value))})]}),(0,r.jsxs)("div",{className:u.row,children:[(0,r.jsx)("button",{className:"button button--primary",onClick:e=>m(!p),children:"Toggle fixed counter"}),(0,r.jsx)("button",{className:"button button--primary",onClick:()=>{w.length<2?f("Not enough data points"):(g(!1),y(!0),f(`rate(...) = ${k.m}`))},children:"Show rate()"}),(0,r.jsx)("button",{className:"button button--primary",onClick:()=>{if(w.length<2)return void f("Not enough data points");g(!1),y(!0);const e=h(k,o)-h(k,a);f(`increase(...) = ${e}`)},children:"Show increase()"}),(0,r.jsx)("button",{className:"button button--primary",onClick:()=>{y(!1),g(!0),f(`rate(...) = ${M.m}`)},children:"Show irate()"})]}),(0,r.jsx)("span",{children:v})]})}function d(e,t){if(!e||!t)return{m:0,y0:0};const s=(t.y-e.y)/(t.x-e.x);return{m:s,y0:e.y-e.x*s}}function h(e,t){return e.m*t+e.y0}i.t1.register(o.A);const p={tags:["observability"],sidebar_position:4},m="Prometheus",x={id:"observability/prometheus",title:"Prometheus",description:"Prometheus is a time series database that is often used to store Metrics. It also offers the powerful query language PromQL to query and aggregate time series data.",source:"@site/docs/observability/prometheus.mdx",sourceDirName:"observability",slug:"/observability/prometheus",permalink:"/docs/observability/prometheus",draft:!1,unlisted:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/observability/prometheus.mdx",tags:[{inline:!0,label:"observability",permalink:"/docs/tags/observability"}],version:"current",sidebarPosition:4,frontMatter:{tags:["observability"],sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Logs",permalink:"/docs/observability/logs"},next:{title:"Eventual Consistency",permalink:"/docs/eventual-consistency"}},y={},b=[{value:"Metric types",id:"metric-types",level:2},{value:"PromQL",id:"promql",level:2},{value:"Counter rates and increases",id:"counter-rates-and-increases",level:2},{value:"<code>rate()</code>",id:"rate",level:3},{value:"<code>increase()</code>",id:"increase",level:3},{value:"<code>irate()</code>",id:"irate",level:3},{value:"Playground",id:"playground",level:2}];function g(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"prometheus",children:"Prometheus"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://prometheus.io",children:"Prometheus"})," is a time series database that is often used to store ",(0,r.jsx)(t.a,{href:"./metrics",children:"Metrics"}),". It also offers the powerful query language PromQL to query and aggregate time series data."]}),"\n",(0,r.jsx)(t.h2,{id:"metric-types",children:"Metric types"}),"\n",(0,r.jsx)(t.p,{children:"Prometheus uses has four main metric types"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://youtube.com/watch?v=fhx0ehppMGM&t=25s",children:"Gauge"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://youtube.com/watch?v=fhx0ehppMGM&t=138s",children:"Counter"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://youtube.com/watch?v=fhx0ehppMGM&t=293s",children:"Summaries"})," measure a distribution using percentile or quantiles. Do not average or aggregate quantiles from multiple service instances or other label dimensions because there is just no statistically valid way to average over percentile. If aggregation of percentiles is needed use Histograms instead."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://youtube.com/watch?v=fhx0ehppMGM&t=405s",children:"Histograms"})," can also track a distribution, but instead of outputting quantiles they count the input value into a set of ranged buckets to measure how many values are observed for each range bucket. In Prometheus the histograms are cumulative so each bucket also contains the count of the previous lower-ranged buckets."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"promql",children:"PromQL"}),"\n",(0,r.jsx)(t.h2,{id:"counter-rates-and-increases",children:"Counter rates and increases"}),"\n",(0,r.jsxs)(t.p,{children:["Prometheus offers three methods for calculating the rate of increase for a counter metric: ",(0,r.jsx)(t.code,{children:"rate()"}),", ",(0,r.jsx)(t.code,{children:"irate()"})," and ",(0,r.jsx)(t.code,{children:"increase()"}),". They all take a range vector full of counter time series as input and return the counters rate of increase under that window. They all require that at least two samples are present in the provided time window. The content of this section is mainly taken from ",(0,r.jsx)(t.a,{href:"https://youtube.com/watch?v=7uy_yovtyqw",children:"this nice YouTube Video"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"rate",children:(0,r.jsx)(t.code,{children:"rate()"})}),"\n",(0,r.jsx)(t.p,{children:"Computes a per second rate of increase that is smoothed or averaged over the entire input range window."}),"\n",(0,r.jsx)(t.h3,{id:"increase",children:(0,r.jsx)(t.code,{children:"increase()"})}),"\n",(0,r.jsxs)(t.p,{children:["Behaves like the ",(0,r.jsx)(t.code,{children:"rate()"})," function except that it returns an absolute value increase over the provided window instead of a per second value.\nNote that ",(0,r.jsx)(t.code,{children:"increase()"})," is not very well suited for counters that increase slowly."]}),"\n",(0,r.jsx)(t.h3,{id:"irate",children:(0,r.jsx)(t.code,{children:"irate()"})}),"\n",(0,r.jsxs)(t.p,{children:["Computes a much faster reacting instantaneous rate by only considering the last two samples under the provided window. Therefore ",(0,r.jsx)(t.code,{children:"irate()"})," will produce very spiky graphs and is only suited for super zoomed-in graphs where you want to see immediate changes in your system behaviour."]}),"\n",(0,r.jsx)(t.h2,{id:"playground",children:"Playground"}),"\n",(0,r.jsx)(c,{})]})}function v(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);