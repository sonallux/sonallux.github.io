"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[5568],{1344:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(5893),o=t(1151);const r={tags:["frontend","angular"]},s="Angular",c={id:"frontend/angular",title:"Angular",description:"Injection Functions",source:"@site/docs/frontend/angular.md",sourceDirName:"frontend",slug:"/frontend/angular",permalink:"/docs/frontend/angular",draft:!1,unlisted:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/frontend/angular.md",tags:[{label:"frontend",permalink:"/docs/tags/frontend"},{label:"angular",permalink:"/docs/tags/angular"}],version:"current",frontMatter:{tags:["frontend","angular"]},sidebar:"defaultSidebar",previous:{title:"Accessibility",permalink:"/docs/frontend/accesibility"},next:{title:"RxJS",permalink:"/docs/frontend/rxjs"}},a={},l=[{value:"Injection Functions",id:"injection-functions",level:2},{value:"Benefits of this new approach",id:"benefits-of-this-new-approach",level:3},{value:"Type safety",id:"type-safety",level:4},{value:"Boilerplate reduction by composing injection functions",id:"boilerplate-reduction-by-composing-injection-functions",level:4},{value:"Dynamic Forms",id:"dynamic-forms",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"angular",children:"Angular"}),"\n",(0,i.jsx)(e.h2,{id:"injection-functions",children:"Injection Functions"}),"\n",(0,i.jsxs)(e.p,{children:["Using the ",(0,i.jsx)(e.code,{children:"inject()"})," Function seams to be the new way of doing DI in Angular. This functions takes an ",(0,i.jsx)(e.code,{children:"InjectionToken"})," as parameter an returns the value for it from the currently active injector. For more details see ",(0,i.jsx)(e.a,{href:"https://marmicode.io/blog/angular-inject-and-injection-functions",children:"this nice blog post"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"@Component(...)\nexport class ComponentOld {\n    constructor(private httpClient: HttpClient) {}\n}\n\n@Component(...)\nexport class ComponentNew {\n  private httpClient = inject(HttpClient)\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"benefits-of-this-new-approach",children:"Benefits of this new approach"}),"\n",(0,i.jsx)(e.h4,{id:"type-safety",children:"Type safety"}),"\n",(0,i.jsxs)(e.p,{children:["Constructor injection with the ",(0,i.jsx)(e.code,{children:"@Inject()"})," decorator does not have type safety. But when using the ",(0,i.jsx)(e.code,{children:"inject()"})," the type can be correctly inferred:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"const MyToken = new InjectionToken<number>('MyToken');\n\n@Component(...)\nclass ComponentOld {\n  constructor(@Inject(MyToken) private value: string) // Compiler can not catch this type mismatch\n}\n\n@Component(...)\nclass ComponentNew {\n  private value = inject(MyToken) // type number is correctly inferred\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"boilerplate-reduction-by-composing-injection-functions",children:"Boilerplate reduction by composing injection functions"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"@Component(...)\nclass RecipesComponent {\n  recipes$ = injectSelection(selectRecipes);\n}\n\nfunction injectSelection(selector) {\n  return inject(Store).select(selector);\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",children:"@Component(...)\nclass ComponentOld {\n  protected entity$: Observable<Entity>;\n\n  constructor(route: ActivatedRoute, http: HttpClient) {\n    this.entity$ = route.params.pipe(\n      map(params => params['id']),\n      filter(id => !!id),\n      switchMap(id => http.get<Entity>(`api/entity/{id}`))\n    )\n  }\n}\n\n@Component(...)\nclass ComponentNew {\n  protected entity$ = fetchEntity();\n}\n\nconst fetchEntity = () => {\n  const http = inject(HttpClient)\n  const route = inject(ActivatedRoute)\n\n  return route.params.pipe(\n    map(params => params['id']),\n    filter(id => !!id),\n    switchMap(id => http.get<Entity>(`api/entity/{id}`))\n  )\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"dynamic-forms",children:"Dynamic Forms"}),"\n",(0,i.jsxs)(e.p,{children:["Next to ",(0,i.jsx)(e.a,{href:"https://angular.io/guide/forms",children:"template-driven Forms"})," and ",(0,i.jsx)(e.a,{href:"https://angular.io/guide/reactive-forms",children:"reactive Forms"})," Angular has a guide about a third type of forms:  ",(0,i.jsx)(e.a,{href:"https://angular.io/guide/dynamic-form",children:"Dynamic Forms"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Library from ",(0,i.jsx)(e.a,{href:"https://github.com/udos86",children:"Udo Sch\xf6fer"}),": ",(0,i.jsx)(e.a,{href:"https://github.com/udos86/ng-dynamic-forms",children:"https://github.com/udos86/ng-dynamic-forms"})]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>c,a:()=>s});var i=t(7294);const o={},r=i.createContext(o);function s(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);