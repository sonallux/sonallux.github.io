"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[5568],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5884:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={tags:["frontend","angular"]},i="Angular",c={unversionedId:"frontend/angular",id:"frontend/angular",title:"Angular",description:"Injection Functions",source:"@site/docs/frontend/angular.md",sourceDirName:"frontend",slug:"/frontend/angular",permalink:"/docs/frontend/angular",draft:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/frontend/angular.md",tags:[{label:"frontend",permalink:"/docs/tags/frontend"},{label:"angular",permalink:"/docs/tags/angular"}],version:"current",frontMatter:{tags:["frontend","angular"]},sidebar:"defaultSidebar",previous:{title:"Frontend",permalink:"/docs/category/frontend"},next:{title:"RxJS",permalink:"/docs/frontend/rxjs"}},l={},p=[{value:"Injection Functions",id:"injection-functions",level:2},{value:"Benefits of this new approach",id:"benefits-of-this-new-approach",level:3},{value:"Type safety",id:"type-safety",level:4},{value:"Boilerplate reduction by composing injection functions",id:"boilerplate-reduction-by-composing-injection-functions",level:4},{value:"Dynamic Forms",id:"dynamic-forms",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"angular"},"Angular"),(0,o.kt)("h2",{id:"injection-functions"},"Injection Functions"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"inject()")," Function seams to be the new way of doing DI in Angular. This functions takes an ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectionToken")," as parameter an returns the value for it from the currently active injector. For more details see ",(0,o.kt)("a",{parentName:"p",href:"https://marmicode.io/blog/angular-inject-and-injection-functions"},"this nice blog post")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component(...)\nexport class ComponentOld {\n    constructor(private httpClient: HttpClient) {}\n}\n\n@Component(...)\nexport class ComponentNew {\n  private httpClient = inject(HttpClient)\n}\n")),(0,o.kt)("h3",{id:"benefits-of-this-new-approach"},"Benefits of this new approach"),(0,o.kt)("h4",{id:"type-safety"},"Type safety"),(0,o.kt)("p",null,"Constructor injection with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject()")," decorator does not have type safety. But when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"inject()")," the type can be correctly inferred:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const MyToken = new InjectionToken<number>('MyToken');\n\n@Component(...)\nclass ComponentOld {\n  constructor(@Inject(MyToken) private value: string) // Compiler can not catch this type mismatch\n}\n\n@Component(...)\nclass ComponentNew {\n  private value = inject(MyToken) // type number is correctly inferred\n}\n")),(0,o.kt)("h4",{id:"boilerplate-reduction-by-composing-injection-functions"},"Boilerplate reduction by composing injection functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component(...)\nclass RecipesComponent {\n  recipes$ = injectSelection(selectRecipes);\n}\n\nfunction injectSelection(selector) {\n  return inject(Store).select(selector);\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component(...)\nclass ComponentOld {\n  protected entity$: Observable<Entity>;\n\n  constructor(route: ActivatedRoute, http: HttpClient) {\n    this.entity$ = route.params.pipe(\n      map(params => params['id']),\n      filter(id => !!id),\n      switchMap(id => http.get<Entity>(`api/entity/{id}`))\n    )\n  }\n}\n\n@Component(...)\nclass ComponentNew {\n  protected entity$ = fetchEntity();\n}\n\nconst fetchEntity = () => {\n  const http = inject(HttpClient)\n  const route = inject(ActivatedRoute)\n\n  return route.params.pipe(\n    map(params => params['id']),\n    filter(id => !!id),\n    switchMap(id => http.get<Entity>(`api/entity/{id}`))\n  )\n}\n")),(0,o.kt)("h2",{id:"dynamic-forms"},"Dynamic Forms"),(0,o.kt)("p",null,"Next to ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/forms"},"template-driven Forms")," and ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/reactive-forms"},"reactive Forms")," Angular has a guide about a third type of forms:  ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/dynamic-form"},"Dynamic Forms")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Library from ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/udos86"},"Udo Sch\xf6fer"),": ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/udos86/ng-dynamic-forms"},"https://github.com/udos86/ng-dynamic-forms"))))}m.isMDXComponent=!0}}]);