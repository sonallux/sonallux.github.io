"use strict";(self.webpackChunksonallux_github_io=self.webpackChunksonallux_github_io||[]).push([[6548],{96:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=r(4848),i=r(8453);const s={tags:["observability"],sidebar_position:2},a="Traces",o={id:"observability/traces",title:"Traces",description:"Traces capture the full path through a system. Such a path is called a trace and contains a chain of spans. A span represents a unit of work or operation. In OpenTelemetry a span includes the following information",source:"@site/docs/observability/traces.md",sourceDirName:"observability",slug:"/observability/traces",permalink:"/docs/observability/traces",draft:!1,unlisted:!1,editUrl:"https://github.com/sonallux/sonallux.github.io/tree/main/docs/observability/traces.md",tags:[{label:"observability",permalink:"/docs/tags/observability"}],version:"current",sidebarPosition:2,frontMatter:{tags:["observability"],sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Metrics",permalink:"/docs/observability/metrics"},next:{title:"Logs",permalink:"/docs/observability/logs"}},c={},l=[{value:"Context propagation",id:"context-propagation",level:2},{value:"Tracing in SpringBoot apps with Micrometer",id:"tracing-in-springboot-apps-with-micrometer",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"traces",children:"Traces"}),"\n",(0,n.jsx)(t.p,{children:"Traces capture the full path through a system. Such a path is called a trace and contains a chain of spans. A span represents a unit of work or operation. In OpenTelemetry a span includes the following information"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Name"}),"\n",(0,n.jsx)(t.li,{children:"Span ID unique id of the span"}),"\n",(0,n.jsx)(t.li,{children:"Trace ID representing the trace that span is part of"}),"\n",(0,n.jsx)(t.li,{children:"Parent span ID (empty for root span)"}),"\n",(0,n.jsx)(t.li,{children:"Start and end timestamps"}),"\n",(0,n.jsx)(t.li,{children:"Attributes"}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces/#span-events",children:"Span events"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces/#span-links",children:"Span links"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces/#span-status",children:"Span status"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces/#span-kind",children:"Span kind"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"context-propagation",children:"Context propagation"}),"\n",(0,n.jsx)(t.p,{children:"With context propagation it is possible to perform distributed tracing and to correlate traces across services that are arbitrarily distributed across process and network boundaries."}),"\n",(0,n.jsxs)(t.p,{children:["The default OpenTelemetry propagator is using the headers specified by the ",(0,n.jsx)(t.a,{href:"https://www.w3.org/TR/trace-context/",children:"W3C TraceContext"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"tracing-in-springboot-apps-with-micrometer",children:"Tracing in SpringBoot apps with Micrometer"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://docs.micrometer.io/tracing/reference/",children:"Micrometer Tracing project"})," provides a facade for popular tracer, similar how the main Micrometer projects provides a facade for observability systems. Micrometer is the default tracer for SpringBoot applications."]}),"\n",(0,n.jsx)(t.p,{children:"To use Micrometer Tracing with the OpenTelemetry Traces add the following dependency to your project:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:"<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-tracing-bridge-otel</artifactId>\n</dependency>\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Alternatively if you want to use the ",(0,n.jsx)(t.a,{href:"https://github.com/openzipkin/brave",children:"Brave tracer"})," from the Zipkin project use ",(0,n.jsx)(t.code,{children:"micrometer-tracing-bridge-brave"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"To export the traces to a tracing backend a compatible exporter or reporter must be added. The recommendation is to use the OpenTelemetry Protocol to stay vendor neutral. Nowadays most tracing backends support OpenTelemetry. Add the following dependency:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:"<dependency>\n  <groupId>io.opentelemetry</groupId>\n  <artifactId>opentelemetry-exporter-otlp</artifactId>\n</dependency>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var n=r(6540);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);